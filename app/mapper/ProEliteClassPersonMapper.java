package mapper;

import com.hht.interceptor.Page;
import models.ProEliteClassPerson;
import org.apache.ibatis.annotations.Param;
import vo.ProEliteClassPersonVo;

import java.util.List;
import java.util.Map;
import java.util.Set;


public interface ProEliteClassPersonMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pro_elite_class_person
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pro_elite_class_person
     *
     * @mbg.generated
     */
    int insert(ProEliteClassPerson record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pro_elite_class_person
     *
     * @mbg.generated
     */
    int insertSelective(ProEliteClassPerson record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pro_elite_class_person
     *
     * @mbg.generated
     */
    ProEliteClassPerson selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pro_elite_class_person
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(ProEliteClassPerson record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pro_elite_class_person
     *
     * @mbg.generated
     */
    int updateByPrimaryKey(ProEliteClassPerson record);

    int selectCountByMap(Map<String, Object> maps);

    List<Map<String,Object>> getEliteClassPersonByListPage(Page page);

   // int updateClassPersonByEmployeeId();
    int updateClassPersonByEmployeeId(ProEliteClassPerson record);
    int updateClassPersonByEmployeeCode(ProEliteClassPerson record);

    List<Map<String,Object>> getPassNotInLobby(Map<String, Object> mapParams);

    int selectPassNotInLobbyCountByShopId(String shopId);

    List<ProEliteClassPerson> getListByIds(List<ProEliteClassPersonVo> list);


    void batchUpdateClassPerson(List<ProEliteClassPerson> list);

    void batchUpdateClassPersonList(List<ProEliteClassPerson> list);

    void batchUpdateClassPersonListone(List<ProEliteClassPerson> list);

    List<Map<String,Object>> getClassPersonListPage(Page page);

    List<ProEliteClassPerson> getElitePersionList(List<ProEliteClassPersonVo> personVoList);

    ProEliteClassPerson queryById(String id);

    List<Map<String,Object>> getClassForEmployeeCode(String employeeCode);
    /**
     * 查询员工是否已经组班
     * @param mapParams
     * @return
     */
    List<ProEliteClassPerson> getClassPersons(Map<String, Object> mapParams);
    /**
     * 查询员工报班次数
     * @param groom
     * @return
     */
    int getEmployeesClassTimesByType(Map<String, Object> groom);
    /**
     * 班级学员详情
     * @return
     */
    List<Map<String,Object>> getClassPersonByListPage(Page page);

    void insertBatchClassPerson(List<ProEliteClassPerson> list);

    List<Map<String,Object>> getEmployeesAllTimesByType(Map<String, Object> groom);
    //查询所有大堂班发证人员
    List<String> selectAllCardPerson();
    List<String> selectAlllobPerson();
    List<String> selectAlllodCardPerson();
    List<String> selectAllManyPerson();
   int  batchUpdate(List<ProEliteClassPersonVo> list);
    List<ProEliteClassPersonVo> getHistroy(List<ProEliteClassPersonVo> params);
    //查询班级人员
    List<ProEliteClassPerson> getClassPersonsList(@Param("list") Set<String> list,@Param("className") String  className);

    void batchUpdateImportClassPerson(List<ProEliteClassPerson> list);
}