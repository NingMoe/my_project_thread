<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.ProEliteClassPersonMapper">
    <resultMap id="BaseResultMap" type="models.ProEliteClassPerson">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="CHAR" property="id"/>
        <result column="employee_id" jdbcType="CHAR" property="employeeId"/>
        <result column="employee_code" jdbcType="VARCHAR" property="employeeCode"/>
        <result column="train_end" jdbcType="BIGINT" property="trainEnd"/>
        <result column="result" jdbcType="VARCHAR" property="result"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <result column="creator_id" jdbcType="CHAR" property="creatorId"/>
        <result column="create_time" jdbcType="BIGINT" property="createTime"/>
        <result column="modifier_id" jdbcType="CHAR" property="modifierId"/>
        <result column="modify_time" jdbcType="BIGINT" property="modifyTime"/>
        <result column="ts" jdbcType="BIGINT" property="ts"/>
        <result column="dr" jdbcType="CHAR" property="dr"/>
        <result column="class_id" jdbcType="CHAR" property="classId"/>
        <result column="groom_time" jdbcType="BIGINT" property="groomTime"/>
        <result column="manager_amerce" jdbcType="DECIMAL" property="managerAmerce"/>
        <result column="manager_cost" jdbcType="DECIMAL" property="managerCost"/>
        <result column="employee_cost" jdbcType="DECIMAL" property="employeeCost"/>
        <result column="employee_amerce" jdbcType="DECIMAL" property="employeeAmerce"/>
        <result column="shop_id" jdbcType="VARCHAR" property="shopId"/>
        <result column="lobby_type" jdbcType="VARCHAR" property="lobbyType"/>
        <result column="lobby_remark" jdbcType="VARCHAR" property="lobbyRemark"/>
        <result column="score" jdbcType="CHAR" property="score"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        id, employee_id, employee_code, train_end, result, remark, creator_id, create_time,
        modifier_id, modify_time, ts, dr, class_id,groom_time,manager_amerce,manager_cost,
        employee_cost,employee_amerce,shop_id,lobby_type,lobby_remark,score
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select
        <include refid="Base_Column_List"/>
        from pro_elite_class_person
        where id = #{id,jdbcType=CHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from pro_elite_class_person
        where id = #{id,jdbcType=CHAR}
    </delete>
    <insert id="insert" parameterType="models.ProEliteClassPerson">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into pro_elite_class_person (id, employee_id, employee_code,
        train_end, result, remark,
        creator_id, create_time, modifier_id,
        modify_time, ts, dr, class_id,groom_time,manager_amerce,manager_cost,
        employee_cost,employee_amerce,shop_id,lobby_type,lobby_remark,score
        )
        values (#{id,jdbcType=CHAR}, #{employeeId,jdbcType=CHAR}, #{employeeCode,jdbcType=VARCHAR},
        #{trainEnd,jdbcType=BIGINT}, #{result,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR},
        #{creatorId,jdbcType=CHAR}, #{createTime,jdbcType=BIGINT}, #{modifierId,jdbcType=CHAR},
        #{modifyTime,jdbcType=BIGINT}, #{ts,jdbcType=BIGINT}, #{dr,jdbcType=CHAR}, #{classId,jdbcType=CHAR},
        #{groomTime,jdbcType=BIGINT},#{managerAmerce,jdbcType=DECIMAL},#{managerCost,jdbcType=DECIMAL},
        #{employeeCost,jdbcType=DECIMAL},#{employeeAmerce,jdbcType=DECIMAL},#{shopId,jdbcType=CHAR}, #{lobbyType,jdbcType=VARCHAR},
        #{lobbyRemark,jdbcType=VARCHAR},#{score,jdbcType=CHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="models.ProEliteClassPerson">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into pro_elite_class_person
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="employeeId != null">
                employee_id,
            </if>
            <if test="employeeCode != null">
                employee_code,
            </if>
            <if test="trainEnd != null">
                train_end,
            </if>
            <if test="result != null">
                result,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="creatorId != null">
                creator_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="modifierId != null">
                modifier_id,
            </if>
            <if test="modifyTime != null">
                modify_time,
            </if>
            <if test="ts != null">
                ts,
            </if>
            <if test="dr != null">
                dr,
            </if>
            <if test="classId != null">
                class_id,
            </if>

            <if test="groomTime != null">
                groom_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=CHAR},
            </if>
            <if test="employeeId != null">
                #{employeeId,jdbcType=CHAR},
            </if>
            <if test="employeeCode != null">
                #{employeeCode,jdbcType=VARCHAR},
            </if>
            <if test="trainEnd != null">
                #{trainEnd,jdbcType=BIGINT},
            </if>
            <if test="result != null">
                #{result,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="creatorId != null">
                #{creatorId,jdbcType=CHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=BIGINT},
            </if>
            <if test="modifierId != null">
                #{modifierId,jdbcType=CHAR},
            </if>
            <if test="modifyTime != null">
                #{modifyTime,jdbcType=BIGINT},
            </if>
            <if test="ts != null">
                #{ts,jdbcType=BIGINT},
            </if>
            <if test="dr != null">
                #{dr,jdbcType=CHAR},
            </if>
            <if test="classId != null">
                #{classId,jdbcType=CHAR},
            </if>
            <if test="groomTime != null">
                #{groomTime,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="models.ProEliteClassPerson">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update pro_elite_class_person
        <set>
            <if test="employeeId != null">
                employee_id = #{employeeId,jdbcType=CHAR},
            </if>
            <if test="employeeCode != null">
                employee_code = #{employeeCode,jdbcType=VARCHAR},
            </if>
            <if test="trainEnd != null">
                train_end = #{trainEnd,jdbcType=BIGINT},
            </if>
            <if test="result != null">
                result = #{result,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="creatorId != null">
                creator_id = #{creatorId,jdbcType=CHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=BIGINT},
            </if>
            <if test="modifierId != null">
                modifier_id = #{modifierId,jdbcType=CHAR},
            </if>
            <if test="modifyTime != null">
                modify_time = #{modifyTime,jdbcType=BIGINT},
            </if>
            <if test="ts != null">
                ts = #{ts,jdbcType=BIGINT},
            </if>
            <if test="dr != null">
                dr = #{dr,jdbcType=CHAR},
            </if>
            <if test="classId != null">
                class_id = #{classId,jdbcType=CHAR},
            </if>
            <if test="groomTime != null">
                ts = #{groomTime,jdbcType=BIGINT},
            </if>

        </set>
        where id = #{id,jdbcType=CHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="models.ProEliteClassPerson">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update pro_elite_class_person
        set employee_id = #{employeeId,jdbcType=CHAR},
        employee_code = #{employeeCode,jdbcType=VARCHAR},
        train_end = #{trainEnd,jdbcType=BIGINT},
        result = #{result,jdbcType=VARCHAR},
        remark = #{remark,jdbcType=VARCHAR},
        creator_id = #{creatorId,jdbcType=CHAR},
        create_time = #{createTime,jdbcType=BIGINT},
        modifier_id = #{modifierId,jdbcType=CHAR},
        modify_time = #{modifyTime,jdbcType=BIGINT},
        ts = #{ts,jdbcType=BIGINT},
        dr = #{dr,jdbcType=CHAR},
        class_id = #{classId,jdbcType=CHAR},
        groom_time = #{groomTime,jdbcType=BIGINT}
        where id = #{id,jdbcType=CHAR}
    </update>

    <select id="selectCountByMap" resultType="java.lang.Integer" parameterType="java.util.Map">
        select
        count(*)
        from pro_elite_class_person
        <where>
            dr = "N"
            <if test="classId != null">
                AND class_id = #{classId,jdbcType=VARCHAR}
            </if>
            <if test="result != null">
                AND result = #{result,jdbcType=VARCHAR}
            </if>
        </where>

    </select>


    <select id="getEliteClassPersonByListPage" resultType="java.util.Map" parameterType="com.hht.interceptor.Page">

        SELECT DISTINCT
        n.id,
        n.result result,
        e.id employeeId,
        n.remark remark,
        n.score score,
        n.lobby_remark lobbyRemark,
        n.lobby_type lobbyType,
        n.manager_amerce managerAmerce,
        n.manager_cost managerCost,
        n.employee_amerce employeeAmerce,
        n.employee_cost employeeCost,
        s.shop_name shopName,
        e.employee_name employeeName,
        e.employee_code employeeCode,
        e.birthday,
        e.gender,
        e.mobile_no mobile,
        e.last_entry_time lastEntryTime,
        e.is_married isMarry,
        e.culture,
        p.position_id positionId,
        pec.term term
        FROM
        pro_elite_class_person n
        INNER JOIN pro_employee e ON e.id = n.employee_id
        INNER JOIN pro_elite_class pec ON n.class_id = pec.id
        LEFT JOIN v_organdshop s ON n.shop_id = s.id
        LEFT JOIN pro_employee_position p ON e.id = p.employee_id AND p.default_position = 'Y' AND p.dr = 'N'

        WHERE
        n.dr = 'N'   AND pec.dr = 'N' AND e.dr = 'N'
        <if test="params.classId != null and params.classId != ''">
            AND   n.class_id = #{params.classId,jdbcType=VARCHAR}
        </if>
        <if test="params.result != null">
            AND n.result = #{params.result,jdbcType=VARCHAR}
        </if>
        <if test="params.classType != null and params.classType != ''">
            AND pec.class_type = #{params.classType,jdbcType=VARCHAR}
        </if>
    </select>

    <select id="getClassPersonListPage" resultType="java.util.Map" parameterType="com.hht.interceptor.Page">

        SELECT
        n.id, n.result result,e.id employeeId,n.remark remark, s.shop_name shopName,
        e.employee_name employeeName,e.employee_code employeeCode,e.birthday,psh.class_status classStatus,
        e.gender,e.mobile_no mobile,e.last_entry_time lastEntryTime,
        e.is_married isMarry,e.culture,e.position_id positionId
        FROM pro_elite_class_person n
        LEFT JOIN (select e.employee_code ,e.employee_name,e.id,
        e.mobile_no ,e.gender ,e.last_entry_time ,e.birthday,
        e.is_married ,e.culture,p.position_id from pro_employee e,

        pro_employee_position p
        WHERE e.id = p.employee_id AND p.default_position='Y' AND e.dr='N' GROUP BY e.employee_code) e
        ON e.id=n.employee_id
        LEFT JOIN pro_shop_elite psh
        ON n.employee_id = psh.employee_id
        LEFT JOIN pro_shop s
        ON psh.shop_id =s.id
        WHERE
         n.result !=100
        <if test="params.classId != null and params.classId != ''">
            AND   n.class_id = #{params.classId,jdbcType=VARCHAR}
        </if>
        AND  n.dr='N'  AND  psh.dr='N' and s.dr='N'
    </select>

    <update id="updateClassPersonByEmployeeId" parameterType="models.ProEliteClassPerson">

    update pro_elite_class_person
    set dr = "Y"
    where employee_id = #{employeeId,jdbcType=CHAR}
  </update>

    <select id="getPassNotInLobby" parameterType="java.util.Map" resultType="java.util.Map">
        select
        e.id employeeId,e.employee_code employeeCode,e.employee_name employeeName,p.position_id
        positionId,c.train_end passTime,c.teacher_name teacherName,c.class_type classType

        from pro_shop_elite pse

        LEFT JOIN pro_employee e
        ON pse.employee_id = e.id
        LEFT JOIN pro_employee_position p
        ON e.id = p.employee_id AND p.default_position='Y'
        LEFT JOIN (SELECT a.teacher_name,a.class_type,pecp.train_end,pecp.employee_code
        FROM pro_elite_class a, pro_elite_class_person pecp
        WHERE a.id=pecp.class_id AND pecp.result ='300' AND a.dr='N' AND pecp.dr='N'
        AND a.class_type=#{classType,jdbcType=VARCHAR}
        ) c
        ON c.employee_code = pse.employee_code
        WHERE
        pse.dr = 'N' AND e.dr = 'N' AND p.dr = 'N' AND pse.is_lobby='Y'
        <if test="isManager !=null">
            AND pse.is_manager= #{shopId,jdbcType=VARCHAR}
        </if>
        AND p.position_id != "BF0CBD48D8000000800000000016E001"
        AND pse.shop_id = #{shopId,jdbcType=VARCHAR}
        GROUP BY employeeCode

    </select>


    <select id="selectPassNotInLobbyCountByShopId" parameterType="java.lang.String" resultType="java.lang.Integer">
    SELECT
     COUNT(*)
    from pro_elite_class_person n
    LEFT JOIN pro_employee_position p
    ON n.employee_id = p.employee_id AND p.default_position='Y'
    LEFT JOIN pro_elite_class a
    ON n.class_id = a.id
    LEFT JOIN pro_shop_elite l
    ON n.employee_id = l.employee_id
    WHERE
    n.dr = "N"  AND  n.result = "300" AND a.class_type = "100" AND  p.id != "BF0CBD48D8000000800000000016E001"
    AND l.shop_id = #{shopId,jdbcType=VARCHAR}

  </select>
    <update id="updateClassPersonByEmployeeCode" parameterType="models.ProEliteClassPerson">

    update pro_elite_class_person
    set dr = "Y"
    where employee_code = #{employeeCode,jdbcType=CHAR}
  </update>

    <select id="getListByIds" parameterType="List" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from pro_elite_class_person
        WHERE dr='N' AND id IN
        <foreach collection="list" item="vo" open="(" close=")" separator=",">
            #{vo.id,jdbcType=CHAR}
        </foreach>
    </select>

    <update id="batchUpdateClassPerson" parameterType="List">
        <foreach collection="list" separator=";" item="item">
            UPDATE pro_elite_class_person
            SET result = #{item.result,jdbcType=VARCHAR},train_end = #{item.trainEnd,jdbcType=BIGINT},
            modify_time = #{item.modifyTime,jdbcType=BIGINT},modifier_id = #{item.modifierId,jdbcType=CHAR}

            <if test="item.remark !=null">
                ,remark = #{item.remark,jdbcType=VARCHAR}
            </if>
            WHERE id = #{item.id}
        </foreach>
    </update>
    <update id="batchUpdateClassPersonList" parameterType="List">
        <foreach collection="list" separator=";" item="item">
            UPDATE pro_elite_class_person
            SET result = #{item.result,jdbcType=VARCHAR},train_end = #{item.trainEnd,jdbcType=BIGINT},
            modify_time = #{item.modifyTime,jdbcType=BIGINT},modifier_id = #{item.modifierId,jdbcType=CHAR}
            <if test="item.remark !=null">
                ,remark = #{item.remark,jdbcType=VARCHAR}
            </if>
            WHERE employee_code = #{item.employeeCode}
            and    class_id in (
            SELECT id from  pro_elite_class where class_type='200'
            )
        </foreach>
    </update>
    <update id="batchUpdateClassPersonListone" parameterType="List">
        <foreach collection="list" separator=";" item="item">
            UPDATE pro_elite_class_person
            SET result = #{item.result,jdbcType=VARCHAR},train_end = #{item.trainEnd,jdbcType=BIGINT},
            modify_time = #{item.modifyTime,jdbcType=BIGINT},modifier_id = #{item.modifierId,jdbcType=CHAR}
            <if test="item.remark !=null">
                ,remark = #{item.remark,jdbcType=VARCHAR}
            </if>
            WHERE employee_code = #{item.employeeCode}
            and    class_id in (
            SELECT id from  pro_elite_class where class_type='100'
            )
        </foreach>
    </update>
    <select id="getElitePersionList" parameterType="List" resultMap="BaseResultMap">
        select
        pecp.id, pecp.employee_id, pecp.employee_code, pecp.train_end, pecp.result, pecp.remark, pecp.creator_id,
        pecp.create_time,
        pecp.modifier_id, pecp.modify_time, pecp.ts, pecp.dr,
        pecp.class_id,pecp.groom_time,pecp.manager_amerce,pecp.manager_cost,
        pecp.employee_cost,pecp.employee_amerce
        ,pes.shop_id
        from pro_elite_class_person pecp,pro_employee_shop pes
        where pecp.id IN
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item.id}
        </foreach>
        AND pecp.dr='N' AND pes.dr='N' AND pes.employee_id=pecp.employee_id
    </select>
    <select id="queryById" parameterType="String" resultMap="BaseResultMap">
        select
        pecp.id, pecp.employee_id, pecp.employee_code, pecp.train_end, pecp.result, pecp.remark, pecp.creator_id, pecp.create_time,
        pecp.modifier_id, pecp.modify_time, pecp.ts, pecp.dr, pecp.class_id,pecp.groom_time,pecp.manager_amerce,pecp.manager_cost,
        pecp.employee_cost,pecp.employee_amerce
        ,pes.shop_id
        from pro_elite_class_person pecp,pro_employee_shop pes
        where pecp.id = #{id}
        AND pecp.dr='N' AND pes.dr='N' AND pes.employee_id=pecp.employee_id
    </select>

    <select id="getClassForEmployeeCode" parameterType="String" resultType="Map">
        SELECT pec.class_type,pec.term,from_unixtime(pec.begin_time/1000) FROM pro_elite_class pec,pro_elite_class_person pecp WHERE pecp.class_id=pec.id
        AND pecp.dr='N' AND pec.dr='N' AND pecp.result='100' AND from_unixtime(pec.begin_time/1000)>now() AND pecp.employee_code=#{employeeCode}
    </select>

    <select id="getClassPersons" parameterType="java.util.Map" resultMap="BaseResultMap">

        SELECT
        <include refid="Base_Column_List"/>
        FROM pro_elite_class_person
        WHERE
        dr ='N'
        AND
        class_id = #{classId,jdbcType=CHAR}
        AND
        employee_code = #{employeeCode,jdbcType=CHAR}
    </select>
    <!--通过班级名称，跟人员code 查询班级人员信息-->
    <select id="getClassPersonsList"  resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM pro_elite_class_person
        WHERE
        dr ='N'
        AND
        class_id IN (SELECT id FROM pro_elite_class WHERE term=#{className,jdbcType=CHAR})
        AND
        employee_code IN
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>
    <!--查询员工报班次数-->
    <select id="getEmployeesClassTimesByType" resultType="java.util.Map" parameterType="java.util.Map">
        SELECT
        count(*)
        FROM
        pro_elite_class_person pecp,
        pro_elite_class pec
        WHERE
        pec.dr = 'N' AND  pecp.result = '200'
        AND
        pecp.employee_code = #{employeeCode,jdbcType=VARCHAR}
        AND
        pec.class_type = #{classType,jdbcType=VARCHAR}

    </select>
    <!--查询所有员工报班次数-->
    <select id="getEmployeesAllTimesByType" resultType="java.util.Map" parameterType="java.util.Map">
        SELECT
        pecp.employee_code employeeCode,count(*) count
        FROM
        pro_elite_class_person pecp,
        pro_elite_class pec
        WHERE
				pecp.class_id=pec.id
				AND
        pec.dr = 'N' AND  pecp.result = '200'
        AND
        pec.class_type = #{classType,jdbcType=VARCHAR} GROUP BY pecp.employee_code
    </select>

    <!-- ===========================报表汇总============================================================= -->
    <!--班级成员详情-->
    <select id="getClassPersonByListPage" resultType="java.util.Map" parameterType="com.hht.interceptor.Page">
<!--
        SELECT
        n.id personId,
        n.result result,
        n.train_end trainEndTime,
        e.id employeeId,
        e.employee_name employeeName,
        e.employee_code employeeCode,
        e.position_id positionId,
        s.shop_name shopName,
        pec.class_type classType,
        pec.term,
        pec.begin_time beginTime,
        pec.train_days days,
        pec.teacher_name teacherName
        FROM pro_elite_class_person n
        LEFT JOIN
        (select e.employee_code ,e.employee_name,e.id,
        e.mobile_no ,e.gender ,e.last_entry_time ,e.birthday,
        e.is_married ,e.culture,p.position_id from pro_employee e,pro_employee_position p
        WHERE e.id = p.employee_id  AND p.default_position='Y' AND e.dr='N' ) e
        ON e.id=n.employee_id
        LEFT JOIN pro_elite_class pec
        ON n.class_id = pec.id
        LEFT JOIN pro_shop_elite psh
        ON n.employee_id = psh.employee_id
        LEFT JOIN pro_shop s
        ON psh.shop_id =s.id
        WHERE
        n.dr='N'
        AND
        pec.dr='N'
        AND
        s.dr='N'-->
        SELECT DISTINCT
        n.id personId,
        n.result result,
        n.train_end trainEndTime,
        e.id employeeId,
        e.employee_name employeeName,
        e.employee_code employeeCode,
        p.position_id positionId,
        s.shop_name shopName,
        pec.class_type classType,
        pec.term,
        pec.begin_time beginTime,
        pec.train_days days,
        pec.teacher_name teacherName
        ,p.shop_id,p.employee_id,s.id
        FROM
        pro_elite_class_person n
        INNER JOIN pro_employee e ON e.id = n.employee_id
        INNER JOIN pro_elite_class pec ON n.class_id = pec.id
        LEFT JOIN v_organdshop s ON n.shop_id = s.id
        LEFT JOIN pro_employee_position p ON e.id = p.employee_id AND p.default_position = 'Y' AND p.dr = 'N'

        WHERE
        n.dr = 'N'   AND pec.dr = 'N' AND e.dr = 'N'
        AND n.result!=100
        <if test="params.classId != null and params.classId !=''">
          AND  n.class_id = #{params.classId,jdbcType=VARCHAR}
        </if>

        <if test="params.shopId != null and params.shopId !='' ">
            AND  p.shop_id = #{params.shopId,jdbcType=VARCHAR}
        </if>
        <if test="params.shopName != null">
            AND  s.shop_name like '%${params.shopName}%'
        </if>
        <if test="params.classType != null">
            AND  pec.class_type=#{params.classType,jdbcType=VARCHAR}
        </if>


    </select>
    <insert id="insertBatchClassPerson" parameterType="models.ProEliteClassPerson">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into pro_elite_class_person (id, employee_id, employee_code,
        train_end, result, remark,
        creator_id, create_time, modifier_id,
        modify_time, ts, dr, class_id,groom_time,manager_amerce,manager_cost,
        employee_cost,employee_amerce
        )
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id,jdbcType=CHAR}, #{item.employeeId,jdbcType=CHAR}, #{item.employeeCode,jdbcType=VARCHAR},
            #{item.trainEnd,jdbcType=BIGINT}, #{item.result,jdbcType=VARCHAR}, #{item.remark,jdbcType=VARCHAR},
            #{item.creatorId,jdbcType=CHAR}, #{item.createTime,jdbcType=BIGINT}, #{item.modifierId,jdbcType=CHAR},
            #{item.modifyTime,jdbcType=BIGINT}, #{item.ts,jdbcType=BIGINT}, #{item.dr,jdbcType=CHAR}, #{item.classId,jdbcType=CHAR},
            #{item.groomTime,jdbcType=BIGINT},#{item.managerAmerce,jdbcType=DECIMAL},#{item.managerCost,jdbcType=DECIMAL},
            #{item.employeeCost,jdbcType=DECIMAL},#{item.employeeAmerce,jdbcType=DECIMAL}
            )
        </foreach>
    </insert>
    <!--查询所有员工报班次数-->
    <select id="selectAllCardPerson" resultType="java.lang.String">
        select b.employee_code employeeCode from pro_elite_class a

        left join pro_elite_class_person b

        on a.id=b.class_id

        where  a.dr='N' AND b.dr='N'

        AND a.class_type='100' and  b.result='300'

    </select>
    <!--查询所有大堂人员-->
    <select id="selectAlllobPerson" resultType="java.lang.String">
        select b.employee_code employeeCode from pro_elite_class a

        left join pro_elite_class_person b

        on a.id=b.class_id

        where  a.dr='N' AND b.dr='N'

        AND a.class_type='100'

    </select>
    <select id="selectAlllodCardPerson" resultType="java.lang.String">
        select b.employee_code employeeCode from pro_elite_class a

        left join pro_elite_class_person b

        on a.id=b.class_id

        where  a.dr='N' AND b.dr='N'

        AND a.class_type='200' and  b.result='300'

    </select>
    <!--查询所有经理人员-->
    <select id="selectAllManyPerson" resultType="java.lang.String">
        select b.employee_code employeeCode from pro_elite_class a

        left join pro_elite_class_person b

        on a.id=b.class_id

        where  a.dr='N' AND b.dr='N'

        AND a.class_type='200'

    </select>
    <!--批量更新-->
 <update id="batchUpdate"  parameterType="List" >
        <foreach collection="list" separator=";" item="item">
            UPDATE pro_elite_class_person
            SET
            manager_amerce=#{item.managerAmerce,jdbcType=DECIMAL},
            manager_cost=#{item.managerCost,jdbcType=DECIMAL},
            employee_cost= #{item.employeeCost,jdbcType=DECIMAL},
            employee_amerce=#{item.employeeAmerce,jdbcType=DECIMAL}
            WHERE id = #{item.id,jdbcType=CHAR}
        </foreach>
    </update>



    <!--查询员工是否存在于历史班级中-->
    <select id="getHistroy" resultType="vo.ProEliteClassPersonVo" parameterType="vo.ProEliteClassPersonVo">
        SELECT
            a.employee_code employeeCode,b.teacher_name teacherName
        FROM
            pro_elite_class_person a,
            pro_elite_class b
        WHERE
        <foreach item="item" collection="list" separator="or" open="(" close=")" index="">
            (a.class_id=b.id and a.dr='N' and  b.dr='N' and  a.employee_code=#{item.employeeCode,jdbcType=CHAR} and b.teacher_name=#{item.teacherName,jdbcType=CHAR} and b.class_type=#{item.classType,jdbcType=CHAR})
        </foreach>
    </select>
<!--导入更新-->
    <update id="batchUpdateImportClassPerson" parameterType="List">
        <foreach collection="list" separator=";" item="item">
            UPDATE pro_elite_class_person
            SET
            score = #{item.score,jdbcType=CHAR},
            remark = #{item.remark,jdbcType=VARCHAR}
            WHERE id = #{item.id}
        </foreach>
    </update>
</mapper>