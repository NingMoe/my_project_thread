<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.ProEliteExaminationOnlineMapper">
    <resultMap id="BaseResultMap" type="models.ProEliteExaminationOnline">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <result column="id" jdbcType="CHAR" property="id"/>
        <result column="employee_id" jdbcType="CHAR" property="employeeId"/>
        <result column="employee_code" jdbcType="VARCHAR" property="employeeCode"/>
        <result column="examination_code" jdbcType="VARCHAR" property="examinationCode"/>
        <result column="examination_date_time" jdbcType="VARCHAR" property="examinationDateTime"/>
        <result column="relult_score" jdbcType="INTEGER" property="relultScore"/>
        <result column="pass_score" jdbcType="INTEGER" property="passScore"/>
        <result column="is_pass" jdbcType="CHAR" property="isPass"/>
        <result column="creator_id" jdbcType="CHAR" property="creatorId"/>
        <result column="create_time" jdbcType="BIGINT" property="createTime"/>
        <result column="modifier_id" jdbcType="CHAR" property="modifierId"/>
        <result column="modify_time" jdbcType="BIGINT" property="modifyTime"/>
        <result column="ts" jdbcType="BIGINT" property="ts"/>
        <result column="dr" jdbcType="CHAR" property="dr"/>
    </resultMap>
    <insert id="insert" parameterType="models.ProEliteExaminationOnline">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into pro_elite_examination_online (id, employee_id, employee_code,
        relult_score, pass_score, is_pass,
        creator_id, create_time, modifier_id,
        modify_time, ts, dr, examination_code,examination_date_time)
        values (#{id,jdbcType=CHAR}, #{employeeId,jdbcType=CHAR}, #{employeeCode,jdbcType=VARCHAR},
        #{relultScore,jdbcType=INTEGER}, #{passScore,jdbcType=INTEGER}, #{isPass,jdbcType=CHAR},
        #{creatorId,jdbcType=CHAR}, #{createTime,jdbcType=BIGINT}, #{modifierId,jdbcType=CHAR},
        #{modifyTime,jdbcType=BIGINT}, #{ts,jdbcType=BIGINT}, #{dr,jdbcType=CHAR},
        #{examinationCode,jdbcType=VARCHAR}, #{examinationDateTime,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="models.ProEliteExaminationOnline">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into pro_elite_examination_online
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="employeeId != null">
                employee_id,
            </if>
            <if test="employeeCode != null">
                employee_code,
            </if>
            <if test="relultScore != null">
                relult_score,
            </if>
            <if test="passScore != null">
                pass_score,
            </if>
            <if test="isPass != null">
                is_pass,
            </if>
            <if test="creatorId != null">
                creator_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="modifierId != null">
                modifier_id,
            </if>
            <if test="modifyTime != null">
                modify_time,
            </if>
            <if test="ts != null">
                ts,
            </if>
            <if test="dr != null">
                dr,
            </if>
            <if test="examinationCode != null">
                examination_code,
            </if>
            <if test="examinationDateTime != null">
                examination_date_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=CHAR},
            </if>
            <if test="employeeId != null">
                #{employeeId,jdbcType=CHAR},
            </if>
            <if test="employeeCode != null">
                #{employeeCode,jdbcType=VARCHAR},
            </if>
            <if test="relultScore != null">
                #{relultScore,jdbcType=INTEGER},
            </if>
            <if test="passScore != null">
                #{passScore,jdbcType=INTEGER},
            </if>
            <if test="isPass != null">
                #{isPass,jdbcType=CHAR},
            </if>
            <if test="creatorId != null">
                #{creatorId,jdbcType=CHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=BIGINT},
            </if>
            <if test="modifierId != null">
                #{modifierId,jdbcType=CHAR},
            </if>
            <if test="modifyTime != null">
                #{modifyTime,jdbcType=BIGINT},
            </if>
            <if test="ts != null">
                #{ts,jdbcType=BIGINT},
            </if>
            <if test="dr != null">
                #{dr,jdbcType=CHAR},
            </if>
            <if test="examinationCode != null">
                #{examinationCode,jdbcType=VARCHAR},
            </if>
            <if test="examinationDateTime != null">
                #{examinationDateTime,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <select id="getExamTransitEmployees" resultType="java.util.Map" parameterType="java.util.Map">

    SELECT
    n.id,e.id employeeId,n.create_time createTime,e.employee_name employeeName,e.employee_code
    employeeCode,p.position_id positionId,s.become_time becomeTime

    FROM pro_elite_examination_online n
    LEFT JOIN pro_employee e
    ON n.employee_code = e.employee_code
    LEFT JOIN pro_employee_position p
    ON e.id = p.employee_id
    LEFT JOIN pro_shop_elite s
    ON n.employee_code= s.employee_code
    WHERE  s.shop_id = #{shopId,jdbcType=VARCHAR}
    AND n.dr = 'N' AND p.dr = 'N' AND e.dr = 'N' AND s.dr = 'N'
    AND p.default_position='Y'
    AND n.is_pass = 'Y' AND s.class_status = '100' AND s.elite_status = '200'
    GROUP BY employeeCode

  </select>


    <select id="getExamTimesCountByEmployyeCode" resultType="java.lang.Integer" parameterType="java.lang.String">

        SELECT
         count(*)

        FROM pro_elite_examination_online
        WHERE  employee_code = #{employeeCode,jdbcType=VARCHAR} AND dr = "N"

    </select>
    <select id="getProEliteExaminationByEmployee" resultType="java.util.Map" parameterType="java.util.Map">
        SELECT
                is_pass
            FROM
                pro_elite_examination_online
            WHERE  dr = "N" AND
         employee_code = #{employeeCode,jdbcType=VARCHAR}
    </select>
    <select id="getProBeanByEmployee" resultType="models.ProEliteExaminationOnline" parameterType="java.util.Map">
    SELECT
        	id,
	employee_id employeeId,
	employee_code employeeCode,
	relult_score relultScore,
	pass_score passScore,
	is_pass isPass,
	creator_id creatorId,
	create_time createTime,
	modifier_id modifierId,
	examination_code examinationCode,
	examination_date_time examinationDateTime

        FROM
        (
        SELECT
        *
        FROM
        pro_elite_examination_online
        WHERE
         employee_code = #{employeeCode,jdbcType=VARCHAR}
        ORDER BY
        create_time DESC
      ) peen
    LIMIT 1
 </select>
    <update id="deleteByEmployeeCode" parameterType="java.lang.String">

        update pro_elite_examination_online
        set dr = 'Y'
        where employee_code = #{employeeCode,jdbcType=CHAR}
    </update>

    <select id="getExamEmployeesByListPage" resultType="java.util.Map" parameterType="com.hht.interceptor.Page">

        SELECT
        n.id,e.id employeeId,n.create_time createTime,e.employee_name employeeName,e.employee_code
        employeeCode,p.position_id positionId,s.elite_pool_time elitePoolTime,psh.shop_name shopName

        FROM pro_elite_examination_online n
        LEFT JOIN pro_employee e
        ON n.employee_code = e.employee_code
        LEFT JOIN pro_employee_position p
        ON e.id = p.employee_id
        LEFT JOIN pro_shop_elite s
        ON n.employee_code= s.employee_code
        LEFT JOIN pro_shop psh
        ON s.shop_id= psh.id

        WHERE
         n.dr = 'N' AND p.dr = 'N' AND e.dr = 'N' AND s.dr = 'N' AND psh.dr='N'
        AND n.is_pass = 'Y'
        AND p.default_position='Y'
        AND s.elite_status = '200'

        <if test="params.shopId != null">
           AND p.shop_id = #{params.shopId,jdbcType=VARCHAR}
        </if>

        <if test="params.stTime != null and params.stTime !=''">
            AND from_unixtime(n.create_time/1000,'%Y-%m-%d')&gt;= from_unixtime(#{params.stTime}/1000,'%Y-%m-%d')
        </if>

        <if test="params.endTime != null and params.endTime !=''">
            AND from_unixtime(n.create_time/1000,'%Y-%m-%d')&lt;= from_unixtime(#{params.endTime}/1000,'%Y-%m-%d')
        </if>

        GROUP BY employeeCode

    </select>


    <!--根据条件查询当月考试的人数-->
    <select id="getExamPassCountByList" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
        pse.shop_id shopId,COUNT(*) count
        FROM pro_shop_elite pse,pro_elite_examination_online peo
        WHERE pse.employee_code =peo.employee_code
        AND from_unixtime(peo.create_time/1000) LIKE '%-${month}-%'
        <if test="isPass != null">
            AND peo.is_pass = #{isPass,jdbcType=CHAR}
        </if>
        AND pse.shop_id IN
        <foreach collection="list" item="shopId" open="(" close=")"
                 separator=",">
            #{shopId}
        </foreach>
        GROUP BY shopId
    </select>



</mapper>